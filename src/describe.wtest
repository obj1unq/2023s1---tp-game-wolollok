import wollok.game.*
import canion.*
import naves.*
import balas.*
import posDir.*
import score.*
import pantallas.*
import pantallaInicial.*
import score.*
import pantallaPerder.*
import nombre.*
import pantallaEleccion.*

describe "Testeo de canion: Movimiento, disparar," {
	
	method initialize() {
		game.clear()
		game.title("Space Invaders")
		game.height(20)
		game.width(30)
		game.cellSize(35)
		soundProducer.provider(soundProviderMock)
		
		nivel1.iniciar()
			
	}
	
	test "Al iniciar el juego, se crearon las naves y las vidas" {
		assert.equals(3, gestorDeVidas.vidas().size())
		assert.equals(33, ovnis.size())
	}
	
	test "Canion se mueve a la derecha" {
		// Check initial positions
		assert.equals(15, canion.position().x())
		assert.equals(1, canion.position().y()) 
		canion.mover(derecha)
		// Canion has moved right perfectly
		assert.equals(16, canion.position().x()) 
	}
	
	test "Canion se mueve a la izquierda" {
		// Check initial positions
		assert.equals(15, canion.position().x())
		assert.equals(1, canion.position().y()) 
		canion.mover(izquierda)
		// Canion has moved left perfectly
		assert.equals(14, canion.position().x()) 
	}
	
	test "El canion no pasa del borde derecho" {
		// Set the position in a border. The game has 30 cells and the first is 0. 30 - 1 = 29 is the border
		canion.position(new Posicion(x = 29, y = 1))
		assert.equals(29, canion.position().x())
		assert.equals(1, canion.position().y())
		canion.mover(derecha)
		// Canion didnt move 
		assert.equals(29, canion.position().x())
		// If we want to move left, we can do it
		canion.mover(izquierda)
		assert.equals(28, canion.position().x()) 
	}
	
	test "El canion no pasa del borde izquierdo" {
		// Set the position in a border. The game has 30 cells and the first is 0. 30 - 1 = 29 is the border
		canion.position(new Posicion(x = 0, y = 1))
		assert.equals(0, canion.position().x())
		assert.equals(1, canion.position().y())
		canion.mover(izquierda)
		// Canion didnt move 
		assert.equals(0, canion.position().x())
		// If we want to move left, we can do it
		canion.mover(derecha)
		assert.equals(1, canion.position().x()) 
	}
	
	test "SerDaniado() reduce una vida del gestor de vidas" {
		canion.estado().serDaniado()
		assert.equals(gestorDeVidas.vidas(), [uno, dos])	
	}
	
	test "El estado del canion cambia al dispararle a la nave aleatoria" {
		canion.estado(normal)
		naveAleatoria.serDestruido()
		assert.notThat(canion.estado() == normal)
	}

	test "Al poseer el canion el estado inmune, las balas que colisionen con él no le quitan vida" {
		canion.estado(inmune)
		canion.estado().serDaniado()
		assert.equals(gestorDeVidas.vidas(), [ uno, dos, tres ])
	}
	
test "Al mover una nave más allá del borde, desciende" {
		const nave1 = new NaveConFuego(position = (new Posicion(x = 0, y = 4)))
		const nave2 = new NaveConFuego(position = (new Posicion(x = 2, y = 4)))
		ovnis.add(nave1)
		ovnis.add(nave2)
		movimiento.direccion(izquierda)
		movimiento.moverNaves()
		assert.equals(0, nave1.position().x())
		assert.equals(3, nave1.position().y())
		assert.equals(2, nave2.position().x())
		assert.equals(3, nave2.position().y())
	}
}